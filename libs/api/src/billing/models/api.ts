/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/invoices': {
    /** Returns a list of invoices based off the users account ID */
    get: operations['get-inventories'];
    parameters: {};
  };
  '/invoices/{invoice_id}': {
    /** Get a specific invoice and its details based on its ID */
    get: operations['get-invoices-invoice_id'];
    parameters: {
      path: {
        invoice_id: string;
      };
    };
  };
  '/transactions': {
    /** Get a transaction id for the given invoice numbers. Id expires in 5 minutes */
    post: operations['post-transactions'];
    parameters: {};
  };
  '/subscriptions': {
    get: operations['get-subscriptions'];
  };
  '/subscriptions/{subscription_id}': {
    get: operations['get-subscriptions-subscription_id'];
    parameters: {
      path: {
        subscription_id: string;
      };
    };
  };
}

export interface components {
  schemas: {
    link: {
      method?: string;
      href: string;
      rel?: string;
    };
    /** Invoice meta-data along with pdf link */
    invoice: {
      /** The unique identifier of the invoice */
      invoice_id: string;
      /** The last date of the billing cycle and date the invoice is issued to a customer (ISO 8601: YYYY-MM-DD) */
      issued_date: string;
      amount_due: components['schemas']['currency'];
      /** Is the invoice paid */
      is_settled: boolean;
      /** Date the invoice is due for payment (ISO 8601: YYYY-MM-DD) */
      due_date: string;
      previous_balance: components['schemas']['currency'];
      invoice_amount: components['schemas']['currency'];
      /** User presented identifier of the invoice */
      sequence_number: number;
      pdf: components['schemas']['link'];
      /** The start date of the billing cycle, usally 21 - 30 days before the issued_date (ISO 8601: YYYY-MM-DD) */
      billing_cycle_start_date: string;
    };
    currency: {
      /** The amount of money, in the smallest denomination of the currency provided by the currency felid */
      value: number;
      /** The 3 letter currency code in all CAPS */
      currency: string;
    };
    subscription: {
      id: string;
      account_id: string;
      service_id: string;
      name: string;
      billing_address: {
        street_address: string;
        locality: string;
        region: string;
        postal_code: string;
        country: string;
        formatted: string;
      };
      events: { [key: string]: any }[];
      state: {
        code: string;
        details: string;
      };
      network_subscription: {
        usage: {
          total_usage_mb: number;
          start_timestamp: string;
          end_timestamp: string;
          upload_speed_mbps: number;
          download_speed_mbps: number;
        };
        renewal_date: string;
        modem: {
          mac_address: string;
          state: {
            code: string;
            details: string;
          };
        };
        gb_allocated: string;
      };
    };
  };
}

export interface operations {
  /** Returns a list of invoices based off the users account ID */
  'get-inventories': {
    parameters: {
      query: {
        /** Customer to query data for. This must match the X Viasat User header in the request */
        account_id?: string;
        page?: number;
        page_size?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            total_items: number;
            total_pages: number;
            items: components['schemas']['invoice'][];
            links: components['schemas']['link'][];
          };
        };
      };
      /** Bad Request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  /** Get a specific invoice and its details based on its ID */
  'get-invoices-invoice_id': {
    parameters: {
      path: {
        invoice_id: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: {
        content: {
          'application/json': components['schemas']['invoice'];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
  /** Get a transaction id for the given invoice numbers. Id expires in 5 minutes */
  'post-transactions': {
    parameters: {};
    responses: {
      /** Created */
      201: {
        content: {
          'application/json': {
            iframe_url: string;
            invoice_numbers: string[];
          };
        };
      };
      /** Bad Request */
      400: unknown;
      /** Unauthorized */
      401: unknown;
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
      /** Not Implemented */
      501: unknown;
    };
    requestBody: {
      content: {
        'application/json': {
          invoice_numbers: string[];
          language_code?: string;
        };
      };
    };
  };
  'get-subscriptions': {
    parameters: {
      query: {
        /** Find subscriptions using a BEP party id */
        party_id?: string;
        /** Find subscriptions using a mac address */
        mac_address?: string;
        /** Filter subscriptions by state */
        state?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': {
            total_items: number;
            total_pages: number;
            links: { [key: string]: any }[];
            items?: components['schemas']['subscription'][];
          };
        };
      };
    };
  };
  'get-subscriptions-subscription_id': {
    parameters: {
      path: {
        subscription_id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          'application/json': { [key: string]: any };
          'application/xml': components['schemas']['subscription'];
        };
      };
      /** Not Found */
      404: unknown;
    };
  };
}
